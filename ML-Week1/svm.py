# -*- coding: utf-8 -*-
"""svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qE7GgT56KCCHiJZZGLPttEcMXkPEmjXB
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC,LinearSVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pickle

"""# task 1 , 2 , 3 (load)"""

with open('tfidf_train_vectors_with_labels.pickle', 'rb') as f:
    tfidf_train_vectors, train_labels = pickle.load(f)

with open('tfidf_val_vectors_with_labels.pickle', 'rb') as f:
    tfidf_val_vectors, val_labels = pickle.load(f)

"""# Task 4"""

train_labels = train_labels.values.flatten()
val_labels  = val_labels.values.flatten()

# Initialize and train KNN model
svm_model = SVC(kernel='linear')  # Example: Linear kernel
svm_model.fit(tfidf_train_vectors, train_labels)


val_predictions = svm_model.predict(tfidf_val_vectors) # prediction on validation dataset

# Evaluatation
val_accuracy = accuracy_score(val_labels, val_predictions)
print("Validation Accuracy:", val_accuracy)

# Assuming tfidf_train_vectors and train_df['label'] are your TF-IDF vectors and labels for training
paramaters = {
    'C': [0.01, 0.1, 1],  # Regularization parameter
    'kernel': ['linear', 'rbf', 'sigmoid'],  # Kernel type
    'gamma': ['scale', 'auto'],  # Kernel coefficient for 'rbf' and 'sigmoid'
    'degree': [2, 3],  # Degree of the polynomial kernel ('poly')
}

svm_model = SVC()

grid_search = GridSearchCV(svm_model, paramaters, cv=5, scoring='accuracy')
grid_search.fit(tfidf_train_vectors, train_labels)  # Fit GridSearchCV to the training data

# Get the best hyperparameters
best_hyperparameters = grid_search.best_params_
best_model = grid_search.best_estimator_  # Get the best model
print("Best Hyperparameters:", best_hyperparameters)

val_predictions_log = best_model.predict(tfidf_val_vectors)
# Evaluation
val_accuracy_log = accuracy_score(val_labels, val_predictions_log)
print("Validation Accuracy (SVM):", val_accuracy_log)

# save model
filename = "svm_model.pickle"
pickle.dump(best_model, open(filename, "wb"))