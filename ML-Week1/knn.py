# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQpFXm6MHGistWrFre92AE1LbYv6M8lA
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC,LinearSVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pickle

"""# Task 1 2 3 (load)"""

with open('tfidf_train_vectors_with_labels.pickle', 'rb') as f:
    tfidf_train_vectors, train_labels = pickle.load(f)

with open('tfidf_val_vectors_with_labels.pickle', 'rb') as f:
    tfidf_val_vectors, val_labels = pickle.load(f)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

train_labels = train_labels.values.flatten()
val_labels  = val_labels.values.flatten()

# Initialize and train KNN model
knn_model = KNeighborsClassifier(n_neighbors=5)  # Example: K=5
knn_model.fit(tfidf_train_vectors, train_labels)

# Predictions on validation and test datasets
val_predictions_knn = knn_model.predict(tfidf_val_vectors)

# Evaluation
val_accuracy_knn = accuracy_score(val_labels, val_predictions_knn)
print("Validation Accuracy (K-nearest Neighbors):", val_accuracy_knn)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV

# Assuming tfidf_train_vectors and train_df['label'] are your TF-IDF vectors and labels for training
parameters_knn = {
    'n_neighbors': [3, 5, 7, 11],  # Number of neighbors
    'weights': ['uniform', 'distance'],  # Weight function used in prediction
    'algorithm': ['auto', 'brute'],  # Algorithm used to compute the nearest neighbors
    'leaf_size': [10, 30, 50],  # Leaf size passed to BallTree or KDTree
    'p': [1, 2],  # Power parameter for Minkowski distance
}

knn_model = KNeighborsClassifier()

grid_search_knn = GridSearchCV(knn_model, parameters_knn, cv=5, scoring='accuracy')
grid_search_knn.fit(tfidf_train_vectors, train_labels)  # Fit GridSearchCV to the training data

# Get the best hyperparameters
best_hyperparameters_knn = grid_search_knn.best_params_
best_model = grid_search_knn.best_estimator_  # Get the best model

# Predictions on validation and test datasets
print("Best Hyperparameters (K-nearest Neighbors):", best_hyperparameters_knn)

val_predictions_knn = best_model.predict(tfidf_val_vectors)
# Evaluation
val_accuracy_knn = accuracy_score(val_labels, val_predictions_knn)
print("Validation Accuracy (K-nearest Neighbors):", val_accuracy_knn)

# save model
filename = "knn_model.pickle"
pickle.dump(best_model, open(filename, "wb"))