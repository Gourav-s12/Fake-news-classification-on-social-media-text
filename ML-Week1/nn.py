# -*- coding: utf-8 -*-
"""nn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11-e5JCzG_m5GM8MFeuzBEnoECkRgdcFC
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC,LinearSVC
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pickle

"""# task 1 , 2 , 3 (load)"""

with open('tfidf_train_vectors_with_labels.pickle', 'rb') as f:
    tfidf_train_vectors, train_labels = pickle.load(f)

with open('tfidf_val_vectors_with_labels.pickle', 'rb') as f:
    tfidf_val_vectors, val_labels = pickle.load(f)

"""# Task 4"""

from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score

train_labels = train_labels.values.flatten()
val_labels  = val_labels.values.flatten()

# Initialize and train MLP model
mlp_model = MLPClassifier()
mlp_model.fit(tfidf_train_vectors, train_labels)

# Predictions on validation and test datasets
val_predictions_mlp = mlp_model.predict(tfidf_val_vectors)

# Evaluation
val_accuracy_mlp = accuracy_score(val_labels, val_predictions_mlp)
print("Validation Accuracy (MLPClassifier):", val_accuracy_mlp)

from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import GridSearchCV

# Assuming tfidf_train_vectors and train_df['label'] are your TF-IDF vectors and labels for training
parameters_mlp = {
    'hidden_layer_sizes': [(50,), (100,), (150,)],  # Number of units in the hidden layers
    'activation': ['relu', 'tanh'],  # Activation function
    'solver': ['adam', 'lbfgs'],  # Solver for weight optimization
}

mlp_model = MLPClassifier(random_state=42)

grid_search_mlp = GridSearchCV(mlp_model, parameters_mlp, cv=5, scoring='accuracy')
grid_search_mlp.fit(tfidf_train_vectors, train_labels)  # Fit GridSearchCV to the training data

# Get the best hyperparameters
best_hyperparameters_mlp = grid_search_mlp.best_params_
best_model = grid_search_mlp.best_estimator_  # Get the best model
print("Best Hyperparameters (MLPClassifier):", best_hyperparameters_mlp)

# save model
filename = "nn_model.pickle"
pickle.dump(best_model, open(filename, "wb"))

val_predictions_log = best_model.predict(tfidf_val_vectors)
# Evaluation
val_accuracy_log = accuracy_score(val_labels, val_predictions_log)
print("Validation Accuracy (NN):", val_accuracy_log)