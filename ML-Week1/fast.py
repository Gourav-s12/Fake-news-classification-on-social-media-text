# -*- coding: utf-8 -*-
"""fast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/147DNq0j91gPhG8dxFuNpFQzDsWCekfO1
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import pickle
# !pip install fastText
import fasttext

"""# task 1 , 2"""

train_df = pd.read_csv('./train_split.csv')
val_df=pd.read_csv('./val_split.csv')

train_df

"""# Task 4"""

train_df["labeled_tweet"] = "__label__" + train_df["label"].map({1: 'real', 0: 'fake'}) + " " + train_df["tweet"]
train_df.head(5)

val_df["labeled_tweet"] = "__label__" + val_df["label"].map({1: 'real', 0: 'fake'}) + " " + val_df["tweet"]

# Assuming you have a DataFrame 'train_df' with columns 'label' and 'tweet' for training
train_df[["labeled_tweet"]].to_csv('train.txt', header=False, index=False,  encoding='utf-8')
val_df[["labeled_tweet"]].to_csv('val.txt', header=False, index=False,  encoding='utf-8')

# Train the FastText model
model = fasttext.train_supervised(input="train.txt")

# Evaluation
val_result = model.test("val.txt")
print("Validation Result (FastText):", val_result)

val_predictions = [model.predict(text)[0][0] for text in val_df['tweet']]
val_predictions = [1 if label == '__label__real' else 0 for label in val_predictions]

val_accuracy = accuracy_score(val_df['label'], val_predictions)
print("Validation Accuracy (FastText):", val_accuracy)

best_accuracy = 0
best_params = {}

# Define parameter values to explore
learning_rates = [0.01, 0.05, 0.1]
epochs = [10, 15]
wordNgrams_values = [2, 3]
dim_values = [25, 50, 75]
loss_functions = ['hs', 'softmax']

for lr in learning_rates:
    for epoch in epochs:
        for wordNgrams in wordNgrams_values:
                for dim in dim_values:
                    for loss_function in loss_functions:
                        # print(1)
                        # Train the FastText model
                        model = fasttext.train_supervised(
                            input="train.txt",
                            lr=lr,
                            epoch=epoch,
                            wordNgrams=wordNgrams,
                            dim=dim,
                            loss=loss_function
                        )

                        # Evaluate on validation dataset
                        val_predictions = [model.predict(text)[0][0] for text in val_df['tweet']]
                        val_predictions = [1 if label == '__label__real' else 0 for label in val_predictions]
                        val_accuracy = accuracy_score(val_df['label'], val_predictions)
                        # val_accuracy = val_accuracy

                        # Check if this set of parameters gives better accuracy
                        if val_accuracy > best_accuracy:
                            best_accuracy = val_accuracy
                            best_params = {
                                'lr': lr,
                                'epoch': epoch,
                                'wordNgrams': wordNgrams,
                                'dim': dim,
                                'loss': loss_function
                            }

# Train the final model with the best parameters on the full training data
final_model = fasttext.train_supervised(
    input="train.txt",
    lr=best_params['lr'],
    epoch=best_params['epoch'],
    wordNgrams=best_params['wordNgrams'],
    dim=best_params['dim'],
    loss=best_params['loss']
)

# Save model to file
final_model.save_model("model_fasttext.bin")